#---------------------------------------------------------------------------
__author__ = 'Jonathan Tonthat'
__date__ = '03042018'
__version__ = '1'
import os
import ssl
import subprocess

#Dictionary of return types for uname that means system is most likely windows machine
MicrosoftOS = ["Windows_NT","CYGWIN_NT-5.1","CYGWIN_NT-6.1","CYGWIN_NT-6.1-WOW64","CYGWIN_NT-6.1","CYGWIN_NT-10.0","MS-DOS"]

#todo, seperate these 2 so that there are no duplicates in a single on EX: xxxxversions2 {"Windows Server 2008 SP2":"GDR:6.0.6002.19743"}
MicrosoftSRVversions1 {"Windows 7 SP1":"6.1.7601.23762", "Windows 6.1 Server 2008 r2 SP1":"6.1.7601.23762","Windows 2012":"6.2.9200.22137",
"Windows 8.1":"6.3.9600.18655", "Windows Server 2012 R2":"6.3.9600.18655", "Windows 10 Version 1507":"10.0.10240.17394",
"Windows 10 Version 1511":"10.0.10586.916", "Windows 10 Version Windows Server 2016": "10.0.14393.1198"}

MicrosoftSRVversions2 {"Windows Server 2003 SP2":"5.2.3790.6021", "Windows XP":"5.1.2600.7208", "Windows Vista SP2":"GDR:6.0.6002.19743",
 "Windows Vista SP2":"LDR:6.0.6002.24067", "Windows Server 2008 SP2":"GDR:6.0.6002.19743", "Windows Server 2008 SP2":"LDR:6.0.6002.24067",
  "Windows 8":"6.2.9200.22099"}
#---------------------------------------------------------------------------
#says at least openSSL 1.0.1g to avoid HEartbleed
def vulnerable_to_Heartbleed():
    sslversion = ssl.OPENSSL_VERSION
    #print(sslversion)
    if "openSSL" in sslversion:
        #vulnerable
        length = len(sslversion)
        version = sslversion[8:length] #openssl + " " = 8 chars = 1.0.1g
        parts = version.split('.')
        if parts[1] > '1':
            #not vulnerable
            vultoheart = "Not Vulnerable to Heartbleed bug"
        else:
            if parts[1] == '1' & parts[2] >= '1':
                #not vulnerable
                vultoheart = "Not Vulnerable to Heartbleed bug"
            else:
                temp = parts[3]
                if parts[1] == '1' & parts[2] == '0' & temp[0:0] > '2':
                    #not vulnerable
                    vultoheart = "Not Vulnerable to Heartbleed bug"
                else:
                    if temp == '1g' & parts[1] == '1' & parts[2] == '0':
                        #not vulnerable
                        vultoheart = "Not Vulnerable to Heartbleed bug"
                    else:
                        #vulnerable
                        vultoheart = "Vulnerable to Heartbleed bug"
    else:
        #not vulnerable
        vultoheart = "Not Vulnerable to Heartbleed bug"
    print(vultoheart)
#---------------------------------------------------------------------------
def vulnerable_to_Shellshock(): #broken
    bashCommand = "x='() { :;}; echo vulnerable' bash -c 'echo hello'"
    output = subprocess.check_output(['bash','-c', bashCommand]) #either == vulnerable or hello
    output2 = str(output)[2:len(str(output))-3] # remove stuff returned by bash call and convert bit to str
    if (output2 == "vulnerable"):
        vultoshell = "Vulnerable to Shellshock"
    elif output2 == "hello":
        vultoshell = "Not vulnerable to Shellshock"
    else:
        vultoshell = "Test inconclusive"
    print(vultoshell)
#---------------------------------------------------------------------------
def vulnerable_to_EBDP():
# check the operating system
    sysname = os.uname() # DO STRING EDITING
    #print(sysname)
    if sysname in MicrosoftOS:
        #Vulnerable to ETERNALBLUE / DOUBLEPULSAR #Search for CVE-2017-014(3-8)/CVE-2016-3345
        vultoEDP = "It is a windows machine"
        # retrieve the SRV.sys driver version number
        #match the os with the non vulnerable srv.sys number and see
        #if derived driver version number is greater than corresponding
        #srv.sys number.







    else:
        vultoEDP = "Not Vulnerable to Eternal Blue or Double Pulsar" #not vulnerable to Eternal Blue
    print(vultoEDP)
#---------------------------------------------------------------------------
def main():
    print("\n")
    print("YOUR SYSTEM IS.... ")
    vulnerable_to_Heartbleed()
    vulnerable_to_Shellshock()
    vulnerable_to_EBDP()
    print("\n")
    #exit()
#---------------------------------------------------------------------------

if __name__ == '__main__':
	main()
